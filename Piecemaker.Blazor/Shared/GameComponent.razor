@implements IDisposable
@inject IJSRuntime JsRuntime
@using ChessDotCore;
@using Piecemaker.Blazor.Shared;
<div class="header">
    <img class="logo" src="/img/mana-white.png" alt="Piecemaker" />
    <h3 class="table-id" onclick="navigator.clipboard.writeText(window.location.href);">/@Table.Id.ToString("x")</h3>
    <button class="question" @onclick="()=>{ Help.Show(); }">?</button>
    <p class="status-message">@StatusMessage</p>
</div>
<Help @ref="@Help"></Help>
<div id="chessboard" style="width: 100%;"></div>
<div class="dashboard">
    <div class="buttons">
        <CascadingValue Value="@this">
            <TableActionButton Action="TableActionButton.TableAction.FindNew"></TableActionButton>
            <TableActionButton Action="TableActionButton.TableAction.OpenClose"></TableActionButton>
            <TableActionButton Action="TableActionButton.TableAction.SwapSides"></TableActionButton>
            <TableActionButton Action="TableActionButton.TableAction.Reset"></TableActionButton>
        </CascadingValue>
    </div>
    <div class="moves-border">
        <div class="moves-wrapper">
            <div class="moves">
                @for (int i = 0; i < Table.Game.Moves.Count; i += 2)
                {
                    <span class="number">@(i / 2 + 1).</span>
                    <span class="half-move-white">@Table.Game.Moves[i].SAN</span>
                    string second = Table.Game.Moves.ElementAtOrDefault(i + 1)?.SAN ?? "";
                    <span class="half-move-black">@second</span>
                }
                @for (int i = 6 - (12 - Table.Game.Moves.Count) / 2; i < 6; i++)
                {
                    <span class="number">@(i+1).</span>
                    <span class="half-move-white"></span>
                    <span class="half-move-black"></span>
                }
            </div>
        </div>
    </div>
</div>
<div style="display:none;">
    <audio id="@SoundNames.Check" src="/webm/move-check.webm"></audio>
    <audio id="@SoundNames.Capture" src="/webm/capture.webm"></audio>
    <audio id="@SoundNames.Summon" src="/webm/promote.webm"></audio>
    <audio id="@SoundNames.MoveOpponent" src="/webm/move-opponent.webm"></audio>
    <audio id="@SoundNames.MoveSelf" src="/webm/move-self.webm"></audio>
    <audio id="@SoundNames.OpponentJoined" src="/webm/game-start.webm"></audio>
    <audio id="@SoundNames.OpponentDisconnected" src="/webm/game-end.webm"></audio>
    <audio id="@SoundNames.IncomingActionRequest" src="/webm/notify.webm"></audio>
</div>
<p>Piecemaker beta @System.Environment.GetEnvironmentVariable("HEROKU_RELEASE_VERSION")</p>
@code {
    public Engine.Program PiecemakerGame => Blazor.Program.Piecemaker;
    public Client Client { get; set; }
    [Parameter] public Table Table { get; set; }
    private string[] DebugState => GetDebugStateString();
    private string SimpleFen => Table.Game.GetFen().Split()[0];
    private string LastMove => Table.Game.Moves.LastOrDefault()?.ToString() ?? "";
    private Player Winner => Table.Game.IsCheckmated(Player.White) ? Player.Black : Table.Game.IsCheckmated(Player.Black) ? Player.White : Player.None;
    private string StatusMessage => GetStatusMessage();
    private Help Help;
    [Inject]
    public IJSRuntime JSRuntime { get; set; }
    public GameComponent()
    {
    }
    protected override void OnInitialized()
    {
        Table.ValidMoveWasMade += Table_ValidMoveWasMade;
        Table.ClientJoined += Table_ClientJoined;
        Table.ClientDisconnected += Table_ClientDisconnected;
        Table.SideSwapActionHandled += Table_SideSwapActionHandled;
        Table.ResetActionHandled += Table_ResetActionHandled;
        Table.StatusChanged += Table_StatusChanged;
        Client = Table.Join();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("init",
                Table.Game.GetFen(), Client.Player.ToString().ToLower(),
                LastMove,
                Table.Game.WhoseTurn.ToString().ToLower()
                );
            await InitGameComponentInstance();
        }
        await JSRuntime.InvokeVoidAsync("setValidMoves",
            Client.ValidMoves,
            Table.Game.WhoseTurn.ToString().ToLower(),
            Table.Game.WhiteSummonablePieces.Select(s => "w" + s).ToList().Concat(
            Table.Game.BlackSummonablePieces.Select(s => "b" + s.ToUpper()).ToList())
        );
        await JSRuntime.InvokeVoidAsync("updateMana", GetGameManasAndCosts());
        await UpdateTitle();
    }
    private async Task InitGameComponentInstance()
    {
        var dotNetObjRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("registerGameComponentObject", dotNetObjRef);
    }

    [JSInvokable("MakeMove")]
    public async Task<bool> MakeMove(string move)
    {
        var result = Client.MakeMove(move);
        if (!result)
        {
            await JSRuntime.InvokeVoidAsync("setPosition", SimpleFen);
        }
        await InvokeAsync(StateHasChanged);
        return result;
    }

    private Dictionary<string, int> GetGameManasAndCosts()
    {
        return new Dictionary<string, int>
{
            {".piece-cost-wP", Table.Game.WhitePieceCosts.Pawn},
            {".piece-cost-wN", Table.Game.WhitePieceCosts.Knight},
            {".piece-cost-wB", Table.Game.WhitePieceCosts.Bishop},
            {".piece-cost-wR", Table.Game.WhitePieceCosts.Rook},
            {".piece-cost-wQ", Table.Game.WhitePieceCosts.Queen},
            {".mana-white", Table.Game.WhiteMana},

            {".piece-cost-bP", Table.Game.BlackPieceCosts.Pawn},
            {".piece-cost-bN", Table.Game.BlackPieceCosts.Knight},
            {".piece-cost-bB", Table.Game.BlackPieceCosts.Bishop},
            {".piece-cost-bR", Table.Game.BlackPieceCosts.Rook},
            {".piece-cost-bQ", Table.Game.BlackPieceCosts.Queen},
            {".mana-black", Table.Game.BlackMana}
        };
    }
    private string[] GetDebugStateString()
    {
        return new string[] {
            $"You are {Client.Id} ({Client.Player})",
            $"Opponent: {Client.GetOpponentClient()?.Id.ToString() ?? "none"}",
            Winner != Player.None ? $"{Winner} wins" : $"{Table.Game.WhoseTurn} to move",
            $"Allocated tables: {PiecemakerGame.AllocatedTables}",
            $"Open Tables: {PiecemakerGame.OpenTables}",
            $"Closed Tables: {PiecemakerGame.ClosedTables}",
            $"Ready Tables: {PiecemakerGame.ReadyTables}",
            $"Playing Tables: {PiecemakerGame.PlayingTables}",
            $"Paused Tables: {PiecemakerGame.PausedTables}",
            $"Finished Tables: {PiecemakerGame.FinishedTables}",
            $"Empty Tables: {PiecemakerGame.EmptyTables}",
            $"Move history: {String.Join(" ", Table.Game.Moves)}"
        };
    }
    public string GetStatusMessage()
    {
        if (Client.Player == Player.None)
            return "You are spectating.";

        switch (Table.Status)
        {
            case Status.Open:
                return StatusMessages.Open;
            case Status.Closed:
                return StatusMessages.Closed;
            case Status.Ready:
                return StatusMessages.Ready;
            case Status.Playing:
                return $"{Table.Game.WhoseTurn} to move.";
            case Status.Paused:
                return StatusMessages.Paused;
            case Status.Finished:
                if (Winner == Player.None) return "Game drawn.";
                return $"{Winner} wins.";
            default:
                return "";
        }
    }
    private async Task UpdateTitle()
    {
        bool isNotifying = (Table.Status == Status.Playing || Table.Status == Status.Ready) && Table.Game.WhoseTurn == Client.Player;
        await JsRuntime.InvokeVoidAsync("updateTitle", isNotifying);
    }

    private async void Table_ValidMoveWasMade(object sender, MoveEventArgs e)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("setPosition", e.NewPositionSimpleFen);
            await JSRuntime.InvokeVoidAsync("highlightSquares", e.From, e.To);
            await JSRuntime.InvokeVoidAsync("playSound", SoundNames.GetMoveSoundName(e, Client.Player));

            await InvokeAsync(StateHasChanged);
        }
        catch (TaskCanceledException) { }
    }
    private async void Table_ClientJoined(object sender, Client e)
    {
        try
        {
            if (Client != null && e.Player != Player.None)
                await JSRuntime.InvokeVoidAsync("playSound", SoundNames.OpponentJoined);
            await InvokeAsync(StateHasChanged);
        }
        catch (TaskCanceledException) { }
    }
    private async void Table_ClientDisconnected(object sender, Client e)
    {
        try
        {
            if (e.Player != Player.None)
            {
                await JSRuntime.InvokeVoidAsync("playSound", SoundNames.OpponentDisconnected);
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (TaskCanceledException) { }
    }
    private async void Table_SideSwapActionHandled(object sender, ActionEventArgs e)
    {
        try
        {
            if (e.State == ActionEventArgs.ActionState.Completed)
                await JSRuntime.InvokeVoidAsync("setOrientation", Client.Player.ToString().ToLower());
            else if (e.State == ActionEventArgs.ActionState.Initiated && e.Actor == ~Client.Player)
                await JSRuntime.InvokeVoidAsync("playSound", SoundNames.IncomingActionRequest);
            await InvokeAsync(StateHasChanged);
        }
        catch (TaskCanceledException) { }
    }
    private async void Table_ResetActionHandled(object sender, ActionEventArgs e)
    {
        try
        {
            if (e.State == ActionEventArgs.ActionState.Completed)
            {
                await JSRuntime.InvokeVoidAsync("setPosition", Table.Game.GetFen().Split()[0]);
                await JSRuntime.InvokeVoidAsync("highlightSquares", "", "");
            }
            else if (e.State == ActionEventArgs.ActionState.Initiated && e.Actor == ~Client.Player)
                await JSRuntime.InvokeVoidAsync("playSound", SoundNames.IncomingActionRequest);
            await InvokeAsync(StateHasChanged);
        }
        catch (TaskCanceledException) { }
    }
    private async void Table_StatusChanged(object sender, Status e)
    {
        try
        {
            await UpdateTitle();
            await InvokeAsync(StateHasChanged);
        }
        catch (TaskCanceledException) { }
    }
    void IDisposable.Dispose()
    {
        Table.Disconnect(Client);
        System.Diagnostics.Debug.WriteLine($"{Client.Id} disconnected.");
    }
    internal static class SoundNames
    {
        public const string Check = "audio-check";
        public const string Capture = "audio-capture";
        public const string Summon = "audio-promote";
        public const string MoveOpponent = "audio-move-opponent";
        public const string MoveSelf = "audio-move-self";
        public const string OpponentJoined = "audio-game-start";
        public const string OpponentDisconnected = "audio-game-end";
        public const string IncomingActionRequest = "audio-notify";

        public static string GetMoveSoundName(MoveEventArgs e, Player clientPlayer)
        {
            if (e.Type.HasFlag(MoveType.Check)) return Check;
            if (e.Type.HasFlag(MoveType.Capture)) return Capture;
            if (e.Type.HasFlag(MoveType.Summon)) return Summon;
            if (e.Player != clientPlayer) return MoveOpponent;
            return MoveSelf;
        }
    }
    internal static class StatusMessages
    {
        public const string Open = "This table is open. Wait for an opponent or close the table.";
        public const string Closed = "This table is closed. Copy the link to invite your friends.";
        public const string Ready = "Ready for the first move.";
        public const string Paused = "Opponent left. They can rejoin with the link.";
    }
}