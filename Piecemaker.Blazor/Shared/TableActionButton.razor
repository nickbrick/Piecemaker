@inject NavigationManager NavManager
<button class="button@(IsEmphasized() ? " emphasis":"")" disabled="@(IsDisabled())" hidden="@(IsHidden())" @onclick="@OnClick">@(Text())</button>
@code {
    [CascadingParameter] public GameComponent Context { get; set; }
    [Parameter] public TableAction Action { get; set; }
    private EventCallback<MouseEventArgs> OnClick;
    private Func<string> Text;
    private Func<bool> IsDisabled = () => false;
    private Func<bool> IsHidden = () => false;
    private Func<bool> IsEmphasized = () => false;

    public enum TableAction
    {
        OpenClose,
        FindNew,
        SwapSides,
        Reset
    }
    protected async override void OnInitialized()
    {
        switch (Action)
        {
            case TableAction.FindNew:
                Text = () => { return "Find new table"; };
                IsDisabled = () =>
                {
                    return Context.Table.Status == Status.Playing;
                };
                OnClick = EventCallback.Factory.Create<MouseEventArgs>(this, FindTable);
                break;
            case TableAction.OpenClose:
                Text = () => { return Context.Table.Status != Status.Closed ? "Close table" : "Open table"; };
                IsDisabled = () =>
                {
                    return Context.Client.Player == ChessDotCore.Player.None
                        || !(Context.Table.Status == Status.Open || Context.Table.Status == Status.Closed);
                };
                OnClick = EventCallback.Factory.Create<MouseEventArgs>(this, OpenCloseTable);
                IsHidden = () => { return Context.Client.Player == ChessDotCore.Player.None; };
                break;
            case TableAction.SwapSides:
                Text = () =>
                {
                    if (Context.Table.SideSwapInitiator == Context.Client.Player)
                        return "Cancel side swap request";
                    else if (Context.Table.SideSwapInitiator == ~Context.Client.Player)
                        return "Accept side swap request";
                    else if (Context.Table.PlayingClientsCount == 2)
                        return "Ask to swap sides";
                    else
                        return "Change side";
                };
                IsDisabled = () =>
                {
                    return Context.Client.Player == ChessDotCore.Player.None
                        || !(Context.Table.Status == Status.Open || Context.Table.Status == Status.Closed || Context.Table.Status == Status.Ready);
                };
                OnClick = EventCallback.Factory.Create<MouseEventArgs>(this, SwapSides);
                IsEmphasized = () => { return Context.Table.SideSwapInitiator == ~Context.Client.Player; };
                IsHidden = () => { return Context.Client.Player == ChessDotCore.Player.None; };
                break;
            case TableAction.Reset:
                Text = () =>
                {
                    if (Context.Table.PlayingClientsCount == 2)
                        if (Context.Table.Status == Status.Playing || Context.Table.Status == Status.Finished)
                            if (Context.Table.ResetInitiator == ChessDotCore.Player.None)
                                return "Ask to reset board";
                            else if (Context.Table.ResetInitiator == Context.Client.Player)
                                return "Cancel reset request";
                            else if (Context.Table.ResetInitiator == ~Context.Client.Player)
                                return "Accept reset request";
                    return "Reset board";
                };
                IsDisabled = () =>
                {
                    return (Context.Table.Status == Status.Open || Context.Table.Status == Status.Ready || Context.Table.Status == Status.Closed);
                };
                OnClick = EventCallback.Factory.Create<MouseEventArgs>(this, Reset);
                IsEmphasized = () => { return Context.Table.ResetInitiator == ~Context.Client.Player; };
                IsHidden = () => { return Context.Client.Player == ChessDotCore.Player.None; };
                break;
        }
    }
    private void FindTable()
    {
        NavManager.NavigateTo($"/{Context.PiecemakerGame.GetRandomOpenTableOrDefault().Id.ToString("x")}", true);
    }
    private void OpenCloseTable()
    {
        Context.Table.OpenClose();
    }
    private void SwapSides()
    {
        Context.Table.HandleSideSwapAction(Context.Client.Player);
    }
    private void Reset()
    {
        Context.Table.HandleResetAction(Context.Client.Player);
    }
}
